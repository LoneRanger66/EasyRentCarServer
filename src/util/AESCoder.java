package util;

import java.io.UnsupportedEncodingException;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;

import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.KeyGenerator;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;

/**
 * AES加密和解密模块
 * 
 * @author ZhaoYang
 *
 */
public class AESCoder {
	// 加解密算法
	private static final String KEY_ALGORITHM = "AES";
	// 加解密方式
	private static final String CIPHER_ALGORITHM = "AES/ECB/PKCS5Padding";

	/**
	 * 生成AES密钥
	 * 
	 * @return AES密钥
	 */
	public static byte[] initKey() {
		KeyGenerator kg = null;
		try {
			kg = KeyGenerator.getInstance(KEY_ALGORITHM);
		} catch (NoSuchAlgorithmException e) {
			e.printStackTrace();
		}
		// 密钥为128位
		kg.init(128);
		SecretKey secretKey = kg.generateKey();
		return secretKey.getEncoded();
	}

	/**
	 * 生成AES密钥，用Constants.CHARSET_NAME_AESKEY字符集生成的字符串表示
	 * 
	 * @return AES密钥的字符串表示
	 */
	public static String initKeyStr() {
		String key = null;
		try {
			key = new String(initKey(), Constants.CHARSET_NAME_AESKEY);
		} catch (UnsupportedEncodingException e) {
			// 不可能发生
			e.printStackTrace();
		}
		return key;
	}

	/**
	 * AES解密
	 * 
	 * @param input
	 *            需要解密的字节数组
	 * @param key
	 *            AES密钥
	 * @return 解密后的字节数组
	 */
	public static byte[] decrypt(byte[] input, byte[] key) {
		SecretKeySpec k = new SecretKeySpec(key, KEY_ALGORITHM);
		Cipher cipher = null;
		try {
			cipher = Cipher.getInstance(CIPHER_ALGORITHM);
		} catch (NoSuchAlgorithmException e) {
			e.printStackTrace();
		} catch (NoSuchPaddingException e) {
			e.printStackTrace();
		}
		try {
			cipher.init(Cipher.DECRYPT_MODE, k);
		} catch (InvalidKeyException e) {
			e.printStackTrace();
		}
		try {
			return cipher.doFinal(input);
		} catch (IllegalBlockSizeException e) {
			e.printStackTrace();
		} catch (BadPaddingException e) {
			e.printStackTrace();
		}
		return null;
	}

	/**
	 * AES加密
	 * 
	 * @param input
	 *            需要加密的字节数组
	 * @param key
	 *            AES密钥
	 * @return 加密后的字节数组
	 */
	public static byte[] encrypt(byte[] input, byte[] key) {
		SecretKeySpec k = new SecretKeySpec(key, KEY_ALGORITHM);
		Cipher cipher = null;
		try {
			cipher = Cipher.getInstance(CIPHER_ALGORITHM);
		} catch (NoSuchAlgorithmException e) {
			e.printStackTrace();
		} catch (NoSuchPaddingException e) {
			e.printStackTrace();
		}
		try {
			cipher.init(Cipher.ENCRYPT_MODE, k);
		} catch (InvalidKeyException e) {
			e.printStackTrace();
		}
		try {
			return cipher.doFinal(input);
		} catch (IllegalBlockSizeException e) {
			e.printStackTrace();
		} catch (BadPaddingException e) {
			e.printStackTrace();
		}
		return null;
	}
}
